* リファレンス
** Job

　- empty_dst
　　　出力先コレクション(-o)を指定しなかった場合に呼ばれます。
　　　出力先コレクション名を返却する必要があります。

　- prepare_create
　　　create_job直前に呼ばれます。

　　　指定した場合は、{ok:1} を返却する必要があります。
　　　それ以外を返却した場合は、Jobはキャンセルされます。

　- create_job (必須)
　　　Job制御に必要な処理を行います。

　　　{ok:1} を返却する必要があります。
　　　それ以外を返却した場合は、Jobはキャンセルされます。

　　　
　-	prepare_run
　　　ワーカ上でrun直前に呼ばれます。

　　　指定した場合は、{ok:1} を返却する必要があります。
　　　それ以外を返却した場合は、Jobは終了します。

　-	run
　　　ジョブの本処理を行います。
　　　返却値は"momonger" DB の "momonger.done" Collectionに格納されます。


** Map

　- empty_dst
　　　Jobと同様　　　

　- prepare_create
　　　Jobと同様　　　

　- post_create
　　　Mapにはcreate_jobはありません。（Map自体に必要な処理を行う為）
　　　その代わりにMapのcreate_job直後にpost_createが呼ばれます。

　　　指定した場合は、{ok:1} を返却する必要があります。
　　　それ以外を返却した場合は、Mapはキャンセルされます。

　-	prepare_run
　　　Jobと同様　　　

　　　全てのワーカーで実行されます。


　-	unique_pre_run
　　　prepare_runの後、単一のワーカーで１度だけ実行されます。

　　　この処理が終わるまで、その他のワーカーは待機します。

　　　指定した場合は、{ok:1} を返却する必要があります。
　　　それ以外を返却した場合は、Jobは終了します。

　-	map(id,doc)
　　　Map処理を行います。

　　　別のドキュメントが複数ワーカーで同時に処理されている事に注意してください。

　-	unique_post_run
　　　全map終了後、単一のワーカーで１度だけ実行されます。

　　　返却値は"momonger" DB の "momonger.done" Collectionに格納されます。

　== Map対象のカスタマイズ（任意） ==

　-	map_cursor
　　　Map対象データを示すカーソルを返却します。

　　　デフォルト：this.src.find()

　-	map_field
　　　Mapのキー名を返却します。

　　　デフォルト："_id"

　-	map_data
　　　map() に与えるデータを返却します。

　　　デフォルト：this.src.findOne({_id:id});

* 並列処理制御、WORKER起動ホストと性能、など

** Job

　　各ワーカーが同一ＪＯＢを処理する事を防ぐ為、管理コレクションを作り排他する。

　　ジョブ管理コレクション：　
　　　　
　　　　　- momonger.momonger.job
　　　　　- momonger.momonger.done

　　書き込み処理：

　　　　　１．ジョブ管理コレクションへの作成とＪＯＢ内容の登録
　　　　　２．ワーカーがＪＯＢ取得の際、ジョブ管理コレクションを更新（ロック）
　　　　　３．ワーカーが解析結果の書き込む
　　　　　４．ワーカーがＪＯＢ終了後、ジョブ管理コレクションを更新（終了コード）

** Map

　　Ｍａｐの場合は、複数ワーカーがＪＯＢを並列実行する。
　　この際、同じドキュメントを処理する事を防ぐためにＭａｐ管理コレクションを作る。

　　Ｍａｐ管理コレクション：　
　
　　　　　- <結果コレクション>.job


　　書き込み処理：（上記Job処理に加え、下記の処理をする）

　　　　　１．（省略）
　　　　　　　１． 対象コレクションの全_idフィールドをＭａｐ管理コレクションにコピー
　　　　　２．（省略）
　　　　　　　１．　（別ワーカーが処理できるように）２で行ったロックを解除する。
　　　　　　　２．　Ｍａｐ管理コレクションから_idを取得し、同時に更新。（ロック）
　　　　　３．（省略）
　　　　　　　１．　処理が終わったドキュメントに対応するＭａｐ管理コレクションを更新。（終了コード）
　　　　　　　== ２．２へ戻る ==
　　　　　４．（省略）


** ワーカ起動場所と性能

　　　　プライマリノードのホスト
　　　　　全てのDB操作がローカルホストで処理出来る為、一番高速に動作できる。

　　　　　他のホストでもワーカーを走らせる時は、mongod用のコアを１つ分は確保して置くと良い。

　　　　セカンダリのホスト
　　　　　ＪＯＢとドキュメントの取得（最大ボトルネック）をローカルホストから行える為、そこそこ早い。

　　　　他のホスト　　　　
　　　　　全てのDB操作をリモートから行う為、低速になる。
　　　　　しかしMongoDBクラスター外のCPUリソースを利用できるメリットがある。
